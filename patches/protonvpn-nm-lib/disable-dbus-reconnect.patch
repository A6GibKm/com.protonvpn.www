diff --git a/protonvpn_nm_lib/core/dbus/dbus_reconnect.py b/protonvpn_nm_lib/core/dbus/dbus_reconnect.py
index 3db50e5..e3949c3 100644
--- a/protonvpn_nm_lib/core/dbus/dbus_reconnect.py
+++ b/protonvpn_nm_lib/core/dbus/dbus_reconnect.py
@@ -27,7 +27,7 @@ class DbusReconnect:
             not os.path.isfile(LOCAL_SERVICE_FILEPATH)
             or (
                 os.path.isfile(LOCAL_SERVICE_FILEPATH)
-                and self.get_hash_from_template() != self.get_service_file_hash(LOCAL_SERVICE_FILEPATH) # noqa
+                and self.get_hash_from_template() != self.get_service_file_hash(LOCAL_SERVICE_FILEPATH)  # noqa
             )
         ):
             self.setup_service()
@@ -35,6 +35,7 @@ class DbusReconnect:
     def setup_service(self):
         """Setup .service file."""
         logger.info("Setting up .service file")
+        return
         filled_template = self.__get_filled_service_template()
         with open(LOCAL_SERVICE_FILEPATH, "w") as f:
             f.write(filled_template)
@@ -56,6 +57,7 @@ class DbusReconnect:
     def start_daemon_reconnector(self):
         """Start daemon reconnector."""
         logger.info("Starting daemon reconnector")
+        return
         daemon_status = False
         try:
             daemon_status = self.check_daemon_reconnector_status()
@@ -72,6 +74,7 @@ class DbusReconnect:
     def stop_daemon_reconnector(self):
         """Stop daemon reconnector."""
         logger.info("Stopping daemon reconnector")
+        return
         daemon_status = False
         try:
             daemon_status = self.check_daemon_reconnector_status()
@@ -95,6 +98,7 @@ class DbusReconnect:
             "Managing daemon: cb_type-> \"{}\"; ".format(callback_type)
             + "daemon_status -> \"{}\"".format(daemon_status)
         )
+        return
         if callback_type == DaemonReconnectorEnum.START and not daemon_status:
             logger.info("Calling daemon reconnector for start")
             self.call_daemon_reconnector(callback_type)
@@ -119,6 +123,7 @@ class DbusReconnect:
         Returns:
             int: indicates the status of the daemon process
         """
+        return 0
         logger.info("Checking daemon reconnector status")
         check_daemon = subprocess.run(
             ["systemctl", "status", "--user", "protonvpn_reconnect"],
@@ -156,6 +161,7 @@ class DbusReconnect:
             command (string): to either start or stop the process
         """
         logger.info("Calling daemon reconnector")
+        return
         if command not in self.DAEMON_COMMANDS:
             raise Exception("Invalid daemon command \"{}\"".format(command))
 
diff --git a/protonvpn_nm_lib/core/subprocess_wrapper.py b/protonvpn_nm_lib/core/subprocess_wrapper.py
index 96634f6..5a8098e 100644
--- a/protonvpn_nm_lib/core/subprocess_wrapper.py
+++ b/protonvpn_nm_lib/core/subprocess_wrapper.py
@@ -18,7 +18,7 @@ class SubprocessWrapper:
         is effectivtly a layer on top of subprocess.
     """
 
-    _acceptable_binaries = {"nmcli", "systemctl", "clear", "xdg-open"}
+    _acceptable_binaries = {"nmcli", "clear", "xdg-open"}
     PIPE = _subprocess.PIPE
     STDOUT = _subprocess.STDOUT
     DEVNULL = _subprocess.DEVNULL